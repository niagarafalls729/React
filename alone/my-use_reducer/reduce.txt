리듀스란....

배열을 순회하면서 작업을 처리하고 결과를 만들어진걸 저장하는등등

기본적으로 배열 요소에 대해서 리듀스 함수를 적용할수 있으며, 각요소에 대한 어떤 처리를 한값들을 누적시켜 하나의 값으로 줄일수 있다.

사용법

배열.reduce(함수(누적값, 현재값 ,인덱스 , 원본값 ), 초기값 )

예제 1  학생 5명의 성적이 있는데 각 학생의 점수를 모두 더한 총합을 계산하시오

const members = [
    45, 32,55,22,11
];



const reduceRTN = members.reduce(function(acc , cur ){
    console.log(acc + "///" + cur)
    return acc = cur + acc 

} , 0 );
//0 생략가능.
console.log(reduceRTN)




const numbers = [1,2,3,4,5,6];

const result = numbers.reduce(function( acc , cur){
    console.log(cur/2)
    if( cur %2 == 1  ){
        acc = acc + cur
    }
    return acc 
 
})

console.log("----------------------------------")
console.log(result)
console.log("----------------------------------")


const result = numbers.reduce(function( acc , cur){
   
    if( cur > 4  ){
        acc = acc + cur
    }
    return acc 
 
}, 0 )

// 초기값 주의 



//reduce 메서드 사용시 내부에서의 변화되는 값과 리턴값을 표로 나타내보시오.
//이때 , 초깃값 설정은 없다라고 전제한다.


const numbers = [0,1,2,3,4 ];

const result = numbers.reduce(function(acc,cur,inx,originArr){
    console.log("acc::::"+acc)
    console.log("cur::::"+cur)
    console.log("inx::::"+inx)
    console.log("originArr::::"+originArr)
    return acc+cur;
})

console.log("========================================")
console.log("최종 리턴값:  "+result)
console.log("========================================")


//배열 요소 각각의 합을 구한 후 그에 대한 평균을 reduce 메서드를 사용하여 구하기
// reduce 메서드를 이요한 평균 구하기는 생각보다 까다롭다.


const numbers = [0,1,2,3,4 ];

const result = numbers.reduce(function(acc,cur,inx,originArr){
    
    if(cur % 2 != 0){
        acc.push(cur)
    }
    return acc;
},[])

console.log("========================================")
console.log("최종 리턴값:  "+result)
console.log("========================================")

//사전지식 1

const testOBJ = {'홍길동':20 , '이순신':30};

console.log("========================================")
console.log(Boolean(testOBJ['홍길동'])) // true
console.log(typeof testOBJ['홍길동']) //string x --> number
console.log(testOBJ['홍길자']) // undefined
console.log(testOBJ['홍길동']) // 20
console.log("========================================")


const testAr = ['홍길동','이순신']


console.log("========================================")
console.log(testAr['홍길동']) // undefined
console.log(testAr['이순신']) // undefined
console.log(testAr[0]) // 홍길동
console.log(Boolean(testAr['홍길동'])) //false
console.log(Boolean(testAr[0])) //true
console.log(Boolean(testAr[1])) //false
console.log(Boolean(testAr[2])) //false
console.log(Boolean(0)) //false
console.log(Boolean(1)) //true
console.log(Boolean(2)) //true
console.log(Boolean(3)) //true
console.log("========================================")




//사전지식2
//|| 연산자
// 가장 왼쪽 피연산자 부터 시작 --> 우측 진행 --> 피연산자를 평가
// 이때 , 피연산자를 불리언형으로 변환 후 --> 값이 true이면 연산 STOP --> 피연산자의 변환전 원래 값을 리턴

console.log(1||0) // 1 
console.log(undefined||0) // 0
console.log(Boolean(undefined)||0) //0
console.log(Boolean(2)||0) // true
console.log(undefined || (2)||0) // 2
console.log(undefined || null ||0) // 0


const testOBJ2 = {'홍길동':20 , '이순신':30};

console.log( (testOBJ2['홍길동'] || null )+1 ) // 21

console.log( testOBJ2['홍길동xxxxxxxxxx'] || null  ) //null


// 배열 요소내 중복된 문자열 (숫자)의 빈도 수 체크하기

const someArr= ['Python','HTML','CSS','JavaScript','Python','CSS','JavaScript','JAVA','JavaScript']

const result = someArr.reduce(function(acc,cur,inx,originArr){

    if(acc[cur] != undefined){
      acc[cur] =  acc[cur]+1 
    }else{
      acc[cur] = 1 
    }
  return acc
},{})
console.log(result) 

